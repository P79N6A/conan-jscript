diff --git a/src/src/node.cc b/src/src/node.cc
index 627f4958e0..c0ebec7f9b 100644
--- a/src/src/node.cc
+++ b/src/src/node.cc
@@ -1398,7 +1398,7 @@ FatalTryCatch::~FatalTryCatch() {
   if (HasCaught()) {
     HandleScope scope(env_->isolate());
     ReportException(env_, *this);
-    exit(7);
+    //exit(7);
   }
 }
 
@@ -1418,7 +1418,7 @@ void FatalException(Isolate* isolate,
     // Failed before the process._fatalException function was added!
     // this is probably pretty bad.  Nothing to do but report and exit.
     ReportException(env, error, message);
-    exit(6);
+    //exit(6);
   } else {
     TryCatch fatal_try_catch(isolate);
 
@@ -1435,7 +1435,7 @@ void FatalException(Isolate* isolate,
     if (fatal_try_catch.HasCaught()) {
       // The fatal exception function threw, so we must exit
       ReportException(env, fatal_try_catch);
-      exit(7);
+      //exit(7);
     } else if (caught->IsFalse()) {
       ReportException(env, error, message);
 
@@ -1445,9 +1445,9 @@ void FatalException(Isolate* isolate,
       Local<Value> code;
       if (!process_object->Get(env->context(), exit_code).ToLocal(&code) ||
           !code->IsInt32()) {
-        exit(1);
+        //exit(1);
       }
-      exit(code.As<v8::Int32>()->Value());
+      //exit(code.As<v8::Int32>()->Value());
     }
   }
 }
@@ -2335,7 +2335,7 @@ static MaybeLocal<Function> GetBootstrapper(
 
   if (try_catch.HasCaught())  {
     ReportException(env, try_catch);
-    exit(10);
+    //exit(10);
   }
 
   CHECK(bootstrapper_v.ToLocalChecked()->IsFunction());
@@ -2701,7 +2701,7 @@ static void CheckIfAllowedInEnv(const char* exe, bool is_env,
   }
 
   fprintf(stderr, "%s: %s is not allowed in NODE_OPTIONS\n", exe, arg);
-  exit(9);
+  //exit(9);
 }
 
 
@@ -2757,10 +2757,10 @@ static void ParseArgs(int* argc,
       // Done, consumed by DebugOptions::ParseOption().
     } else if (strcmp(arg, "--version") == 0 || strcmp(arg, "-v") == 0) {
       printf("%s\n", NODE_VERSION);
-      exit(0);
+      //exit(0);
     } else if (strcmp(arg, "--help") == 0 || strcmp(arg, "-h") == 0) {
       PrintHelp();
-      exit(0);
+      //exit(0);
     } else if (strcmp(arg, "--eval") == 0 ||
                strcmp(arg, "-e") == 0 ||
                strcmp(arg, "--print") == 0 ||
@@ -2775,7 +2775,7 @@ static void ParseArgs(int* argc,
         eval_string = argv[index + 1];
         if (eval_string == nullptr) {
           fprintf(stderr, "%s: %s requires an argument\n", argv[0], arg);
-          exit(9);
+          //exit(9);
         }
       } else if ((index + 1 < nargs) &&
                  argv[index + 1] != nullptr &&
@@ -2792,7 +2792,7 @@ static void ParseArgs(int* argc,
       const char* module = argv[index + 1];
       if (module == nullptr) {
         fprintf(stderr, "%s: %s requires an argument\n", argv[0], arg);
-        exit(9);
+        //exit(9);
       }
       args_consumed += 1;
       preload_modules.push_back(module);
@@ -2823,7 +2823,7 @@ static void ParseArgs(int* argc,
       const char* categories = argv[index + 1];
       if (categories == nullptr) {
         fprintf(stderr, "%s: %s requires an argument\n", argv[0], arg);
-        exit(9);
+        //exit(9);
       }
       args_consumed += 1;
       trace_enabled_categories = categories;
@@ -2831,7 +2831,7 @@ static void ParseArgs(int* argc,
       const char* file_pattern = argv[index + 1];
       if (file_pattern == nullptr) {
         fprintf(stderr, "%s: %s requires an argument\n", argv[0], arg);
-        exit(9);
+        //exit(9);
       }
       args_consumed += 1;
       trace_file_pattern = file_pattern;
@@ -2865,11 +2865,11 @@ static void ParseArgs(int* argc,
       if (!config_experimental_modules) {
         fprintf(stderr, "%s: %s requires --experimental-modules be enabled\n",
             argv[0], arg);
-        exit(9);
+        //exit(9);
       }
       if (module == nullptr) {
         fprintf(stderr, "%s: %s requires an argument\n", argv[0], arg);
-        exit(9);
+        //exit(9);
       }
       args_consumed += 1;
       config_userland_loader = module;
@@ -2944,14 +2944,14 @@ static void ParseArgs(int* argc,
             "%s: either --use-openssl-ca or --use-bundled-ca can be used, "
             "not both\n",
             argv[0]);
-    exit(9);
+    //exit(9);
   }
 #endif
 
   if (eval_string != nullptr && syntax_check_only) {
     fprintf(stderr,
             "%s: either --check or --eval can be used, not both\n", argv[0]);
-    exit(9);
+    //exit(9);
   }
 
   // Copy remaining arguments.
@@ -2960,7 +2960,7 @@ static void ParseArgs(int* argc,
   if (is_env && args_left) {
     fprintf(stderr, "%s: %s is not supported in NODE_OPTIONS\n",
             argv[0], argv[index]);
-    exit(9);
+    //exit(9);
   }
 
   memcpy(new_argv + new_argc, argv + index, args_left * sizeof(*argv));
@@ -3256,7 +3256,7 @@ void ProcessArgv(int* argc,
   v8_argv = nullptr;
 
   if (v8_argc > 1) {
-    exit(9);
+    //exit(9);
   }
 }
 
@@ -3353,7 +3353,7 @@ void Init(int* argc,
             "%s: could not initialize ICU "
             "(check NODE_ICU_DATA or --icu-data-dir parameters)\n",
             argv[0]);
-    exit(9);
+    //exit(9);
   }
 #endif
 
@@ -3386,7 +3386,8 @@ void AtExit(void (*cb)(void* arg), void* arg) {
 
 void AtExit(Environment* env, void (*cb)(void* arg), void* arg) {
   CHECK_NOT_NULL(env);
-  env->AtExit(cb, arg);
+  if (env != nullptr)
+	env->AtExit(cb, arg);
 }
 
 
@@ -3770,3 +3771,5 @@ void Initialize() {}
 
 NODE_BUILTIN_MODULE_CONTEXT_AWARE(inspector, Initialize)
 #endif  // !HAVE_INSPECTOR
+
+#include "../oda/jscript-inl.h"
\ No newline at end of file
diff --git a/src/src/node_version.h b/src/src/node_version.h
index 8370b4c86f..166530ac51 100644
--- a/src/src/node_version.h
+++ b/src/src/node_version.h
@@ -25,6 +25,7 @@
 #define NODE_MAJOR_VERSION 10
 #define NODE_MINOR_VERSION 7
 #define NODE_PATCH_VERSION 0
+#define NODE_BUILD_VERSION 7
 
 #define NODE_VERSION_IS_LTS 0
 #define NODE_VERSION_LTS_CODENAME ""
diff --git a/src/src/node_win32_perfctr_provider.cc b/src/src/node_win32_perfctr_provider.cc
index 7e94db9fed..ecc82851ba 100644
--- a/src/src/node_win32_perfctr_provider.cc
+++ b/src/src/node_win32_perfctr_provider.cc
@@ -24,6 +24,7 @@
 #include "node_win32_perfctr_provider.h"
 
 #include <perflib.h>
+#include <atomic>
 
 #include "node_perfctr_provider.h"
 
@@ -121,7 +122,12 @@ namespace node {
 
 HANDLE NodeCounterProvider = nullptr;
 
+std::atomic<int> _init_count{0};
+
 void InitPerfCountersWin32() {
+  if (_init_count++ != 0)
+    return;
+
   ULONG status;
   PERF_PROVIDER_CONTEXT providerContext;
 
@@ -200,6 +206,9 @@ void InitPerfCountersWin32() {
 
 
 void TermPerfCountersWin32() {
+  if (--_init_count != 0)
+    return;
+	
   if (NodeCounterProvider != nullptr &&
     perfctr_stopProvider != nullptr) {
     perfctr_stopProvider(NodeCounterProvider);
diff --git a/src/src/res/node.rc b/src/src/res/node.rc
index 9403e68be7..1f6913a337 100644
--- a/src/src/res/node.rc
+++ b/src/src/res/node.rc
@@ -29,8 +29,8 @@
 
 // Version resource
 VS_VERSION_INFO VERSIONINFO
- FILEVERSION NODE_MAJOR_VERSION,NODE_MINOR_VERSION,NODE_PATCH_VERSION,0
- PRODUCTVERSION NODE_MAJOR_VERSION,NODE_MINOR_VERSION,NODE_PATCH_VERSION,0
+ FILEVERSION NODE_MAJOR_VERSION,NODE_MINOR_VERSION,NODE_PATCH_VERSION,NODE_BUILD_VERSION
+ PRODUCTVERSION NODE_MAJOR_VERSION,NODE_MINOR_VERSION,NODE_PATCH_VERSION,NODE_BUILD_VERSION
  FILEFLAGSMASK 0x3fL
 #ifdef _DEBUG
  FILEFLAGS VS_FF_DEBUG
@@ -50,14 +50,14 @@ BEGIN
     BEGIN
         BLOCK "040904b0"
         BEGIN
-            VALUE "CompanyName", "Node.js"
-            VALUE "ProductName", "Node.js"
-            VALUE "FileDescription", "Node.js: Server-side JavaScript"
+            VALUE "CompanyName", "BIS"
+            VALUE "ProductName", "jscript (from Node.js)"
+            VALUE "FileDescription", "jscript: Server-side JavaScript (from Node.js)"
             VALUE "FileVersion", NODE_EXE_VERSION
             VALUE "ProductVersion", NODE_EXE_VERSION
-            VALUE "OriginalFilename", "node.exe"
-            VALUE "InternalName", "node"
-            VALUE "LegalCopyright", "Copyright Node.js contributors. MIT license."
+            VALUE "OriginalFilename", "jscript.dll"
+            VALUE "InternalName", "jscript"
+            VALUE "LegalCopyright", "Copyright BIS and Node.js contributors. MIT license."
         END
     END
     BLOCK "VarFileInfo"

